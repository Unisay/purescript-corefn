# HLint configuration file
# https://github.com/ndmitchell/hlint
##########################

# This file contains a template configuration file, which is typically
# placed as .hlint.yaml in the root of your project

# Specify additional command line arguments
#
- arguments: [--color, --cpp-simple, -XQuasiQuotes, -XImportQualifiedPost]
# Control which extensions/flags/modules/functions can be used
#
- extensions:
    # - default: false # all extension are banned by default
    - name:
        - NoStarIsType
        - ApplicativeDo
        - BangPatterns
        - BlockArguments
        - ConstraintKinds
        - DataKinds
        - DeriveDataTypeable
        - DeriveFoldable
        - DeriveFunctor
        - DeriveGeneric
        - DeriveLift
        - DeriveTraversable
        - DerivingStrategies
        - DerivingVia
        - EmptyCase
        - EmptyDataDecls
        - EmptyDataDeriving
        - ExistentialQuantification
        - ExplicitForAll
        - FlexibleContexts
        - FlexibleInstances
        - GADTSyntax
        - GeneralisedNewtypeDeriving
        - ImportQualifiedPost
        - KindSignatures
        - LambdaCase
        - MultiParamTypeClasses
        - MultiWayIf
        - NumericUnderscores
        - OverloadedStrings
        - PolyKinds
        - PostfixOperators
        - RankNTypes
        - RecordWildCards
        - ScopedTypeVariables
        - StandaloneDeriving
        - StandaloneKindSignatures
        - TupleSections
        - TypeApplications
        - TypeFamilies
        - TypeOperators
        - ViewPatterns,
        # - { name: CPP, within: CrossPlatform } # CPP can only be used in a given module

#
# - flags:
#   - {name: -w, within: []} # -w is allowed nowhere
#
# - modules:
#   - {name: [Data.Set, Data.HashSet], as: Set} # if you import Data.Set qualified, it must be as 'Set'
#   - {name: Control.Arrow, within: []} # Certain modules are banned entirely
#
# - functions:
#   - {name: unsafePerformIO, within: []} # unsafePerformIO can only appear in no modules
